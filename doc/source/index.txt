.. soma-workflow documentation master file, created by
   sphinx-quickstart on Fri Jan 28 10:45:12 2011.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.




Soma-workflow: A unified and simple interface to parallel computing resource
=============================================================================

  ..
    .. warning:: Documentation under construction.

Soma-workflow release logs and communication can be found at the project `main page. <http://brainvisa.info/soma-workflow>`_

Contents
========

* `Licence`_
* `Quick start on a multiple core machine`_
* `Main Features`_
* `New`_

.. toctree::
   :maxdepth: 1

   concepts.txt
   changes_swf3.txt
   gui.txt
   examples.txt
   MPI_workflow_runner.txt
   errors_troubleshooting.txt
   status_list.txt
   workflow_creation.txt
   client_API.txt
   install_config.txt
   changelog.txt



Licence
=======

  Soma-Workflow is free software, and is distributed under the `CeCILL-B <http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html>`_ licence, which is similar to the BSD licence (with precisions for the french law).


Quick start on a multiple core machine
======================================

* Requirements: Python 2.6 or more. For the GUI: Qt *version 4.6.2 or more*, `PyQt <http://www.riverbankcomputing.co.uk/software/pyqt/intro>`_ *version 4.7.2 or more*, or `PySide <http://www.pyside.org>`_ *version 1.1.1 or more* and optionally `matplotlib <http://matplotlib.sourceforge.net/>`_ *version 0.99 or more*.

* We recommend to install Soma-workflow in a local directory: no special rights required & easy clean up at any time removing the local directory.

  1. Create a local directory such as *~/.local/lib/python2.7/site-packages* and create the bin directory: *~/.local/bin*

  2. Setup the environment variables with the commands::

      $ export PYTHONPATH=$HOME/.local/lib/python2.7/site-packages:$PYTHONPATH

      $ export PATH=$HOME/.local/bin:$PATH

    You can copy these lines in your ~/.bashrc for an automatic setup of the variables at login.

* Download the latest tarball from `PyPI <http://pypi.python.org/pypi/soma-workflow>`_ and expand it.

* Install Soma-workflow in the ~/.local directory::

    $ python setup.py install --user

  If you chose a different name for you local directory (ex: ~/mylocal) use instead the following command::

    $ python setup.py install --prefix ~/mylocal


* Run the GUI::

    $ soma_workflow_gui

* Run the :doc:`documentation examples <examples>`.


Main Features
=============

  **Unified interface to multiple computing resources:** 
    Submission of jobs or workflows with an unique interface to various 
    parallel resources: multiple core machines or clusters which can be 
    managed by various systems (such as Grid Engine, Condor, Torque/PBS, LSF..)

  ..
    .. image:: images/soma_workflow_general.*
      :scale: 40


  **Workflow management:**
    Soma-workflow provides the possibility to submit a set of tasks (called jobs) 
    with execution dependencies without dealing with individual task submission.


    .. figure:: images/workflow_example.*
      :scale: 50
    
      *Workflow example*

  **Python API and Graphical User Interface:**
    The Python API was designed to be easily used by non expert user, but also
    complete to meet external software needs: submission, control and monitoring 
    of jobs and workflows. The GUI provides an easy and quick way of monitoring 
    workflows on various computing resources. The workflows can also be 
    submitted and controlled using the GUI.

    .. figure:: images/API_overview.*
      :scale: 50 

      *Overview of Soma-workflow python API*

    .. figure:: images/gui_overview.*
      :scale: 50 

      *Overview of Soma-workflow graphical interface*
    

  **Quick start on multiple core machines:**
    Soma-workflow is directly operational on any multiple core machine. 
    
  **Transparent remote access to computing resources:** 
    When the computing resource is remote, Soma-workflow can be used as a   
    client-server application. The communication with a remote computing 
    resource is done transparently for the user through a ssh port forwarding 
    tunnel. The client/server architecture enables the user to close the client 
    application at any time. The workflows and jobs execution are not stopped. 
    The user can open a client at any time to check the status of his 
    work.

  **File transfer and file path mapping tools:** 
    If the user's machine and the remote computing resource do not have a shared 
    file system, Soma-workflow provides tools to handle file transfers and/or 
    path name matchings.


New
===

In version 3.0:
---------------

* Pyro is gone, Soma-Workflow is now using `ZMQ <http://zeromq.org/>`_ and `PyZmq <https://pyzmq.readthedocs.io/en/latest/>`_.

  As a consequence, all the client/server communication layer has been made completely incompatible with soma-workflow 2.9 and earlier. Client and server should always be the same version anyway. The client/server API has not changed fundamentally however.

* Porting to Python3: Pyro3 having been dropped, all the requirements for porting to Python3 have now been met, and Soma-Workflow can entirely wotk using Python3. However it is not possible to run different versions of Python on the client and the server: read :doc:`changes_swf3` for details.

In version 2.9:
---------------

* In Soma-Workflow 2.10, the "server management" options have finally been fixed (they have basically never been working earlier). It is now possible to completely install soma-workflow on a remote server and configure it (in a basic way) from the GUI of a client. Only Python is required to be installed on server side, and DRMAA if the server is a cluster using a DRMS.

* Soma-Workflow allows a new server config option, :ref:`CONTAINER_COMMAND <container_command>`, which allows to run jobs through a container (typically `Docker <https://www.docker.com/>`_ or `Singularity <https://www.sylabs.io/singularity/>`_)

See :doc:`the full changelog <changelog>`


..
  light_mode_config.txt
  client_install_config.txt
  server_install_config.txt
  * :ref:`genindex`
  * :ref:`modindex`

* :ref:`search`

..
  :Release: |release|
  :Date: |today|



